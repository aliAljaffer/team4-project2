---
- name: Configure SonarQube
  hosts: localhost
  gather_facts: no
  vars:
    sonar_url: "http://{{ sonar_host }}:{{ sonar_port }}"
    default_admin_password: "admin"
    token_name: "github-actions-token"
    max_retries: 45
    retry_delay: 10

  tasks:
    - name: Wait for SonarQube to be ready
      uri:
        url: "{{ sonar_url }}/api/system/status"
        method: GET
        status_code: 200
        timeout: 5
      register: sonar_status
      until: sonar_status.status == 200 and sonar_status.json.status == "UP"
      retries: "{{ max_retries }}"
      delay: "{{ retry_delay }}"
      failed_when: false

    - name: Check if new admin password already works
      uri:
        url: "{{ sonar_url }}/api/user_tokens/search"
        method: GET
        user: "admin"
        password: "{{ new_admin_password }}"
        force_basic_auth: yes
        status_code: [200, 401]
      register: new_password_check
      failed_when: false
      no_log: true

    - name: Set password change needed flag
      set_fact:
        password_change_needed: "{{ new_password_check.status != 200 }}"

    - name: Display password status
      debug:
        msg: "Password change needed: {{ password_change_needed }}"

    - name: Check if default admin password works (only if password change needed)
      uri:
        url: "{{ sonar_url }}/api/user_tokens/search"
        method: GET
        user: "admin"
        password: "{{ default_admin_password }}"
        force_basic_auth: yes
        status_code: [200, 401]
      register: default_password_check
      when: password_change_needed
      failed_when: false
      no_log: true

    - name: Fail if neither password works
      fail:
        msg: "Neither default password nor new password works. Manual intervention required."
      when: password_change_needed and default_password_check.status != 200

    - name: Change admin password
      uri:
        url: "{{ sonar_url }}/api/users/change_password"
        method: POST
        user: "admin"
        password: "{{ default_admin_password }}"
        force_basic_auth: yes
        body_format: form-urlencoded
        body:
          login: "admin"
          password: "{{ new_admin_password }}"
          previousPassword: "{{ default_admin_password }}"
        status_code: [200, 204]
      when: password_change_needed
      register: password_change_result
      no_log: true

    - name: Verify new password works after change
      uri:
        url: "{{ sonar_url }}/api/user_tokens/search"
        method: GET
        user: "admin"
        password: "{{ new_admin_password }}"
        force_basic_auth: yes
        status_code: 200
      when: password_change_needed
      register: verify_new_password
      no_log: true

    - name: Revoke existing token if present
      uri:
        url: "{{ sonar_url }}/api/user_tokens/revoke"
        method: POST
        user: "admin"
        password: "{{ new_admin_password }}"
        force_basic_auth: yes
        body_format: form-urlencoded
        body:
          name: "{{ token_name }}"
        status_code: [200, 204, 404]
      register: revoke_result
      failed_when: false
      no_log: true

    - name: Generate SonarQube token
      uri:
        url: "{{ sonar_url }}/api/user_tokens/generate"
        method: POST
        user: "admin"
        password: "{{ new_admin_password }}"
        force_basic_auth: yes
        body_format: form-urlencoded
        body:
          name: "{{ token_name }}"
        status_code: 200
      register: token_response
      no_log: true

    - name: Extract token from response
      set_fact:
        sonar_token: "{{ token_response.json.token }}"
      no_log: true

    - name: Validate generated token
      uri:
        url: "{{ sonar_url }}/api/user_tokens/search"
        method: GET
        headers:
          Authorization: "Bearer {{ sonar_token }}"
        status_code: 200
      register: token_validation
      no_log: true

    - name: Save token to file
      copy:
        content: "{{ sonar_token }}"
        dest: /tmp/sonar_token
        mode: "0600"
      delegate_to: localhost
      become: no
      no_log: true
    - name: Verify token file was created
      stat:
        path: /tmp/sonar_token
      register: token_file_stat

    - name: Fail if token file is empty
      fail:
        msg: "Token file is empty or was not created"
      when: not token_file_stat.stat.exists or token_file_stat.stat.size == 0

    - name: Display success message
      debug:
        msg: "SonarQube configuration completed successfully. Token saved to /tmp/sonar_token"
